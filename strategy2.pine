//@version=5
strategy("SMOOTH HK BOT", overlay=true)

// Inputs
keyValue = input(2, title="Key Value. 'This changes the sensitivity'")
atrPeriod = input(1, title="ATR Period")


xATR = ta.atr(atrPeriod)
nLoss = keyValue * xATR

src = close

xATRTrailingStop = 0.0
xATRTrailingStop := src > nz(xATRTrailingStop[1], 0) and src[1] > nz(xATRTrailingStop[1], 0) ? math.max(nz(xATRTrailingStop[1]), src - nLoss) : src < nz(xATRTrailingStop[1], 0) and src[1] < nz(xATRTrailingStop[1], 0) ? math.min(nz(xATRTrailingStop[1]), src + nLoss) : src > nz(xATRTrailingStop[1], 0) ? src - nLoss : src + nLoss


pos = 0   
pos := src[1] < nz(xATRTrailingStop[1], 0) and src > nz(xATRTrailingStop[1], 0) ? 1 : src[1] > nz(xATRTrailingStop[1], 0) and src < nz(xATRTrailingStop[1], 0) ? -1 : nz(pos[1], 0)

xColor = pos == -1 ? color.red : pos == 1 ? color.green : color.blue 

emaValue = ta.ema(src, 1)
aboveEma = ta.crossover(emaValue, xATRTrailingStop)
belowEma = ta.crossover(xATRTrailingStop, emaValue)



barBuy = src > xATRTrailingStop 
barSell = src < xATRTrailingStop 

buyCondition = src > xATRTrailingStop and aboveEma 
sellCondition = src < xATRTrailingStop and belowEma

// Plot buy and sell signals on the chart
plotshape(buyCondition, title="Buy", text='Buy', style=shape.labelup, location=location.belowbar, color=color.green, textcolor=color.white, transp=0, size=size.tiny)
plotshape(sellCondition, title="Sell", text='Sell', style=shape.labeldown, location=location.abovebar, color=color.red, textcolor=color.white, transp=0, size=size.tiny)

var lastCondition = buyCondition ? 'Buy': 'Sell'

// Smoothed Heiken Ashi Candles
lenHa = input(10)
openHa = ta.ema(open, lenHa)
closeHa = ta.ema(close, lenHa)
highHa = ta.ema(high, lenHa)
lowHa = ta.ema(low, lenHa)

haClose = (openHa + highHa + lowHa + closeHa) / 4
haOpen = na(openHa[1]) ? (openHa + closeHa) / 2 : (nz(openHa[1]) + nz(haClose[1])) / 2
haHigh = math.max(highHa, math.max(haOpen, haClose))
haLow = math.min(lowHa, math.min(haOpen, haClose))
haAvg = (haOpen + haClose)/2

// Check if the low of the previous candle was beneath the Heikin Ashi close
lowBeneathClosePrev = low[1] < haAvg[1]

// Check if the close of the previous candle was above the Heikin Ashi close
closeAboveClosePrev = close[1] > haAvg[1]

// Check if the high of the previous candle was above the Heikin Ashi close
highAboveClosePrev = high[1] > haAvg[1]

// Check if the close of the previous candle was below the Heikin Ashi close
closeBelowClosePrev = close[1] < haAvg[1]

redHeikinAshiPrev = haOpen[1] > haClose[1]
greenHeikinAshiPrev = haOpen[1] < haClose[1]



// Highlight bars where the conditions for long or short positions were met in the previous candle
plotshape(series=lowBeneathClosePrev and closeAboveClosePrev and greenHeikinAshiPrev, title="Long Signal", color=color.green, style=shape.triangleup, location=location.abovebar)
plotshape(series=highAboveClosePrev and closeBelowClosePrev and redHeikinAshiPrev, title="Short Signal", color=color.red, style=shape.triangledown, location=location.belowbar)

// Plot regular candles
// plot(close, color=color.new(color.blue, 50), title='Regular Close')
// plot(high, color=color.new(color.green,50), title = 'Regular High')
// plot(low, color=color.new(color.red,50), title = 'Regular Low')

// Plot Heikin Ashi candles
plot(haAvg, color=color.new(color.white, 0), title='Heikin Ashi Avg')
hlineOpen = plot(haOpen, color=color.new(color.gray,0), title='Heikin Ashi Open')
hlineClose = plot(haClose, color=color.new(color.gray,0), title='Heikin Ashi Close')

heikinAshiZoneColor = haClose > haOpen ? color.new(color.green, 50) : haClose < haOpen ? color.new(color.red, 50) : color.new(color.black, 0)
fill(hlineOpen,hlineClose, color=heikinAshiZoneColor, title = 'Heikin Ashi zone')
testedBuy = close[1] > haClose[1] and haOpen[1] < haClose[1] and low[1] < haClose[1]
testedSell = close[1] < haClose[1] and haOpen[1] > haClose[1] and high[1] > haClose[1]

buyEntry = haOpen < haClose and testedBuy and buyCondition
sellEntry = haOpen > haClose and testedSell and sellCondition
strategy.entry("Long", strategy.long, when = buyEntry)
strategy.entry("Short", strategy.short, when = sellEntry)